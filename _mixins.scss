//========
// Mixins
//========

@import 'compass/css3';
@import 'compass/css3/selection';
// includes: reset-font, reset-list-style, reset-table, reset-html5
@import 'compass/reset/utilities';


@mixin appearance($appearance) {
  @each $prefix in -webkit, -moz {
    @if support-prefix($prefix) {
      @include prefix-prop(appearance, $appearance, $prefix);
    }
  }
}

@mixin float($side, $important: false) {
  float: unquote($side + if($important, ' !important', ''));

  @if support-legacy-browser(ie, 6) {
    _display: inline;
  }
}

@mixin inline-block {
  display: inline-block;

  @if support-legacy-browser(ie, 7) {
    *display: inline;
    *zoom: 1;
  }
}

// Browser support data: http://caniuse.com/fontface
@mixin font-face($filename, $font-family: $filename, $path: null) {
  $prefix: '#{$filename}';
  $ts: if(is-absolute($path), '?' + timestamp(), '');

  @if type-of($path) == string {
    @if str-slice($path, str-length($path)) != '/' {
      $path: $path + '/';
    }

    $prefix: $path + $prefix;
  }

  @font-face {
    font-family: '#{$font-family}';

    // IE9 compat mode
    @if support-legacy-browser(ie, 9) {
      src: font-url($prefix + '.eot' + $ts);
    }
    src: -combo-font-urls($prefix, $ts);

    @content;
  }
}

@function is-absolute($path) {
  $path: '#{$path}';
  @return str-slice($path, 0, 1) == '/' or str-slice($path, 0, 4) == 'http';
}

@function timestamp() {
  @return current-time('%Y%m%d%H%M%S%L');
}

@function -combo-font-urls($prefix, $timestamp) {
  $src: comma-list();

  @if support-legacy-browser(ie, 8) {
    $src: append($src, font-files($prefix + '.eot' + $timestamp + '#iefix'));
  }

  // Modern browsers
  $src: append($src, font-files($prefix + '.woff' + $timestamp));

  @if support-legacy-browser(ios-safari, '4.2-4.3') or
      support-legacy-browser(android, '4.2-4.3') or
      support-legacy-browser(safari, 5) or
      support-legacy-browser(opera, 11) {
    $src: append($src, font-files($prefix + '.ttf' + $timestamp));
  }

  @if support-legacy-browser(ios-safari, '4.0-4.1') or
      support-legacy-browser(android, 2.3) or
      index($supported-browsers, opera-mini) {
    $src: append($src, font-files($prefix + '.svg' + $timestamp + '#legacy'));
  }

  @return $src;
}

// Short retina mixin for setting background-image and background-size.
@mixin img-retina($img-1x, $img-2x, $bg-size: $default-background-size) {
  background-image: image-url($img-1x);

  $vendor: comma-list();
  @include with-each-prefix(background-img-opts, $background-size-threshold) {
    @if $current-prefix == -webkit { $vendor: append($vendor, -vendor(-webkit-min, '2')); }
    @if $current-prefix == -moz    { $vendor: append($vendor, -vendor(min--moz, '2')); }
    @if $current-prefix == -o      { $vendor: append($vendor, -vendor(-o-min, '2/1')); }
    @if $current-prefix == null    { $vendor: append($vendor, -vendor(min, '2')); }
  }

  @media #{$vendor},
  only screen and (min-resolution: 192dpi),
  only screen and (min-resolution: 2dppx) {
    background: {
      image: image-url($img-2x);
      size: unquote($bg-size);
    }
  }
}

@function -vendor($prefix, $ratio) {
  @return unquote('only screen and (#{$prefix}-device-pixel-ratio: #{$ratio})');
}

// Fixed position
@mixin fixed($x: center, $y: center) {
  $map: (
    x: (
      left: 0,
      right: 0,
      center: 50%
    ),
    y: (
      top: 0,
      bottom: 0,
      center: 50%
    )
  );

  position: fixed;
  #{if($x == right, right, left)}: map-get(map-get($map, x), $x) or $x;
  #{if($y == bottom, bottom, top)}: map-get(map-get($map, y), $y) or $y;

  @if $x == center or $y == center {
    @include translate(if($x == center, -50%, 0), if($y == center, -50%, 0));
  }

  @content;
}

// Check whether the prefix is supported according to the supported browsers.
@function support-prefix($prefix) {
  $index: index(browser-prefixes($supported-browsers), $prefix);
  @return $index != null and $index != false;
}

// Check whether the browser is supported according to the supported browsers,
// only declared minimum support (overwrite Compass).
@function support-legacy-browser($browser, $min-version, $max-version: null, $threshold: null) {
  @if not index($supported-browsers, $browser) {
    @return false;
  }

  $min-required-version: map-get($browser-minimum-versions, $browser);

  @if not $min-required-version {
    @return true;
  }

  @return compare-browser-versions($browser, '#{$max-version or $min-version}', $min-required-version) >= 0;
}
